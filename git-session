#git config --global user.name mysterio86
#git add -p
#Dgit log -n <limit>
#git log --oneline
#git log --stat
#git log -p
#igit log --author="<pattern>"
#git log --grep="<pattern>"
#git log <since>..<until>
#git log filr
#git log --graph --decorate --oneline
#
#
#This ID can be used in commands like git log <since>..<until> to refer to specific commits. For instance, git log 3157e..5ab91 will display everything between the commits with ID's 3157e and 5ab91. Aside from checksums, branch names (discussed in the Branch Module) and the HEAD keyword are other common methods for referring to individual commits. HEAD always refers to the current commit, be it a branch or a specific commit.
#
#The ~ character is useful for making relative references to the parent of a commit. For example, 3157e~1 refers to the commit before 3157e, and HEAD~3 is the great-grandparent of the current commit.
#

#
#Example
#The Usage section provides many examples of git log, but keep in mind that several options can be combined into a single command:
#
#git log --author="John Smith" -p hello.py
#This will display a full diff of all the changes John Smith has made to the file hello.py.
#
#The .. syntax is a very useful tool for comparing branches. The next example displays a brief overview of all the commits that are in some-feature that are not in master.
#
#git log --oneline master..some-feature
#
#git checkout
#
#Usage
#git checkout master
#Return to the master branch. Branches are covered in depth in the next module, but for now, you can just think of this as a way to get back to the “current” state of the project.
#
#git checkout <commit> <file>
#Check out a previous version of a file. This turns the <file> that resides in the working directory into an exact copy of the one from <commit> and adds it to the staging area.
#
#git checkout <commit>
#Update all files in the working directory to match the specified commit. You can use either a commit hash or a tag as the <commit> argument. This will put you in a detached HEAD state.
#
#Example
#Viewing an Old Revision
#This example assumes that you’ve started developing a crazy experiment, but you’re not sure if you want to keep it or not. To help you decide, you want to take a look at the state of the project before you started your experiment. First, you’ll need to find the ID of the revision you want to see.
#
#git log --oneline
#Let’s say your project history looks something like the following:
#
#b7119f2 Continue doing crazy things
#872fa7e Try something crazy
#a1e8fb5 Make some important changes to hello.py
#435b61d Create hello.py
#9773e52 Initial import
#You can use git checkout to view the “Make some import changes to hello.py” commit as follows:
#
#git checkout a1e8fb5
#This makes your working directory match the exact state of the a1e8fb5 commit. You can look at files, compile the project, run tests, and even edit files without worrying about losing the current state of the project. Nothing you do in here will be saved in your repository. To continue developing, you need to get back to the “current” state of your project
#
#
#git checkout master
#This assumes that you're developing on the default master branch, which will be thoroughly discussed in the Branches Module.
#
#Once you’re back in the master branch, you can use either git revert or git reset to undo any undesired changes.
#
#
#Checking Out a File
#If you’re only interested in a single file, you can also use git checkout to fetch an old version of it. For example, if you only wanted to see the hello.py file from the old commit, you could use the following command:
#
#git checkout a1e8fb5 hello.py
#Remember, unlike checking out a commit, this does affect the current state of your project. The old file revision will show up as a “Change to be committed,” giving you the opportunity to revert back to the previous version of the file. If you decide you don’t want to keep the old version, you can check out the most recent version with the following:
#
#git checkout HEAD hello.py:
#
#
#
#
#
#
#
#
############################################################
#Undoing Changes
#This tutorial provides all of the necessary skills to work with previous revisions of a software project. First, it shows you how to explore old commits, then it explains the difference between reverting public commits in the project history vs. resetting unpublished changes on your local machine.
#
#git revert
#
#The git revert command undoes a committed snapshot. But, instead of removing the commit from the project history, it figures out how to undo the changes introduced by the commit and appends a new commit with the resulting content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.
#
#Usage
#git revert <commit>
#Generate a new commit that undoes all of the changes introduced in <commit>, then apply it to the current branch.
#
#Discussion
#Reverting should be used when you want to remove an entire commit from your project history. This can be useful, for example, if you’re tracking down a bug and find that it was introduced by a single commit. Instead of manually going in, fixing it, and committing a new snapshot, you can use git revert to automatically do all of this for you.
#
#Reverting vs. Resetting
#It's important to understand that git revert undoes a single commit—it does not “revert” back to the previous state of a project by removing all subsequent commits. In Git, this is actually called a reset, not a revert.
#Reverting has two important advantages over resetting. First, it doesn’t change the project history, which makes it a “safe” operation for commits that have already been published to a shared repository. For details about why altering shared history is dangerous, please see the git reset page.
#
#Second, git revert is able to target an individual commit at an arbitrary point in the history, whereas git reset can only work backwards from the current commit. For example, if you wanted to undo an old commit with git reset, you would have to remove all of the commits that occurred after the target commit, remove it, then re-commit all of the subsequent commits. Needless to say, this is not an elegant undo solution.
#
#git reset
#
#If git revert is a “safe” way to undo changes, you can think of git reset as the dangerous method. When you undo with git reset(and the commits are no longer referenced by any ref or the reflog), there is no way to retrieve the original copy—it is a permanent undo. Care must be taken when using this tool, as it’s one of the only Git commands that has the potential to lose your work.
#Like git checkout, git reset is a versatile command with many configurations. It can be used to remove committed snapshots, although it’s more often used to undo changes in the staging area and the working directory. In either case, it should only be used to undo local changes—you should never reset snapshots that have been shared with other developers.
#
#
#Usage
#git reset <file>
#Remove the specified file from the staging area, but leave the working directory unchanged. This unstages a file without overwriting any changes.
#
#git reset
#Reset the staging area to match the most recent commit, but leave the working directory unchanged. This unstages all files without overwriting any changes, giving you the opportunity to re-build the staged snapshot from scratch.
#
#git reset --hard
#Reset the staging area and the working directory to match the most recent commit. In addition to unstaging changes, the --hard flag tells Git to overwrite all changes in the working directory, too. Put another way: this obliterates all uncommitted changes, so make sure you really want to throw away your local developments before using it.
#
#git reset <commit>
#Move the current branch tip backward to <commit>, reset the staging area to match, but leave the working directory alone. All changes made since <commit> will reside in the working directory, which lets you re-commit the project history using cleaner, more atomic snapshots.
#
#git reset --hard <commit>
#Move the current branch tip backward to <commit> and reset both the staging area and the working directory to match. This obliterates not only the uncommitted changes, but all commits after <commit>, as well.
#
#
#Discussion
#All of the above invocations are used to remove changes from a repository. Without the --hard flag, git reset is a way to clean up a repository by unstaging changes or uncommitting a series of snapshots and re-building them from scratch. The --hard flag comes in handy when an experiment has gone horribly wrong and you need a clean slate to work with.
#
#Whereas reverting is designed to safely undo a public commit, git reset is designed to undo local changes. Because of their distinct goals, the two commands are implemented differently: resetting completely removes a changeset, whereas reverting maintains the original changeset and uses a new commit to apply the undo.
#
#Don’t Reset Public History
#You should never use git reset <commit> when any snapshots after <commit> have been pushed to a public repository. After publishing a commit, you have to assume that other developers are reliant upon it.
#
#Removing a commit that other team members have continued developing poses serious problems for collaboration. When they try to sync up with your repository, it will look like a chunk of the project history abruptly disappeared
#
#
#
#
#Examples
#Unstaging a File
#The git reset command is frequently encountered while preparing the staged snapshot. The next example assumes you have two files called hello.py and main.py that you’ve already added to the repository.
#
## Edit both hello.py and main.py
#
## Stage everything in the current directory
#git add .
#
## Realize that the changes in hello.py and main.py
## should be committed in different snapshots
#
## Unstage main.py
#git reset main.py
#
## Commit only hello.py
#git commit -m "Make some changes to hello.py"
#
## Commit main.py in a separate snapshot
#git add main.py
#git commit -m "Edit main.py"
#As you can see, git reset helps you keep your commits highly-focused by letting you unstage changes that aren’t related to the next commit.
#
#Removing Local Commits
#The next example shows a more advanced use case. It demonstrates what happens when you’ve been working on a new experiment for a while, but decide to completely throw it away after committing a few snapshots.
#
## Create a new file called `foo.py` and add some code to it
#
## Commit it to the project history
#git add foo.py
#git commit -m "Start developing a crazy feature"
#
## Edit `foo.py` again and change some other tracked files, too
#
## Commit another snapshot
#git commit -a -m "Continue my crazy feature"
#
## Decide to scrap the feature and remove the associated commits
#git reset --hard HEAD~2
#The git reset HEAD~2 command moves the current branch backward by two commits, effectively removing the two snapshots we just created from the project history. Remember that this kind of reset should only be used on unpublished commits. Never perform the above operation if you’ve already pushed your commits to a shared repository..
#
#git clean
#
#The git clean command removes untracked files from your working directory. This is really more of a convenience command, since it’s trivial to see which files are untracked with git status and remove them manually. Like an ordinary rm command, git clean is not undoable, so make sure you really want to delete the untracked files before you run it.
#
#The git clean command is often executed in conjunction with git reset --hard. Remember that resetting only affects tracked files, so a separate command is required for cleaning up untracked ones. Combined, these two commands let you return the working directory to the exact state of a particular commit.
#
#nes. Combined, these two commands let you return the working directory to the exact state of a particular commit.
#
#Usage
#git clean -n
#Perform a “dry run” of git clean. This will show you which files are going to be removed without actually doing it.
#
#git clean -f
#Remove untracked files from the current directory. The -f (force) flag is required unless the clean.requireForce configuration option is set to false (it's true by default). This will not remove untracked folders or files specified by .gitignore.
#
#git clean -f <path>
#Remove untracked files, but limit the operation to the specified path.
#
#git clean -df
#Remove untracked files and untracked directories from the current directory.
#
#git clean -xf
#Remove untracked files from the current directory as well as any files that Git usually ignores.
#
#Discussion
#The git reset --hard and git clean -f commands are your best friends after you’ve made some embarrassing developments in your local repository and want to burn the evidence. Running both of them will make your working directory match the most recent commit, giving you a clean slate to work with.
#
#The git clean command can also be useful for cleaning up the working directory after a build. For example, it can easily remove the .o and .exe binaries generated by a C compiler. This is occasionally a necessary step before packaging a project for release. The -x option is particularly convenient for this purpose.
#
#Keep in mind that, along with git reset, git clean is one of the only Git commands that has the potential to permanently delete commits, so be careful with it. In fact, it’s so easy to lose important additions that the Git maintainers require the -f flag for even the most basic operations. This prevents you from accidentally deleting everything with a naive git clean call.
#
#
#
#
#
#
#Rewriting history
#Intro
#
#Git‘s main job is to make sure you never lose a committed change. But, it’s also designed to give you total control over your development workflow. This includes letting you define exactly what your project history looks like; however, it also creates the potential to lose commits. Git provides its history-rewriting commands under the disclaimer that using them may result in lost content.
#
#This tutorial discusses some of the most common reasons for overwriting committed snapshots and shows you how to avoid the pitfalls of doing so.
#
#git commit --amend
#
#The git commit --amend command is a convenient way to fix up the most recent commit. It lets you combine staged changes with the previous commit instead of committing it as an entirely new snapshot. It can also be used to simply edit the previous commit message without changing its snapshot.
#
#Usage
#git commit --amend
#Combine the staged changes with the previous commit and replace the previous commit with the resulting snapshot. Running this when there is nothing staged lets you edit the previous commit’s message without altering its snapshot.
#
#Discussion
#Premature commits happen all the time in the course of your everyday development. It’s easy to forget to stage a file or to format your commit message the wrong way. The --amend flag is a convenient way to fix these little mistakes.
#
#Don’t Amend Public Commits
#On the git reset page, we talked about how you should never reset commits that have been shared with other developers. The same goes for amending: never amend commits that have been pushed to a public repository.
#
#Amended commits are actually entirely new commits, and the previous commit is removed from the project history. This has the same consequences as resetting a public snapshot. If you amend a commit that other developers have based their work on, it will look like the basis of their work vanished from the project history. This is a confusing situation for developers to be in and it’s complicated to recover from.
#
#Example
#The following example demonstrates a common scenario in Git-based development. We edit a few files that we would like to commit in a single snapshot, but then we forget to add one of the files the first time around. Fixing the error is simply a matter of staging the other file and committing with the --amend flag:
#
## Edit hello.py and main.py
#git add hello.py
#git commit
#
## Realize you forgot to add the changes from main.py
#git add main.py
#git commit --amend --no-edit
#The editor will be populated with the message from the previous commit and including the --no-edit flag will allow you to make the amendment to your commit without changing its commit message. You can change it if necessary, otherwise just save and close the file as usual. The resulting commit will replace the incomplete one, and it will look like we committed the changes to hello.py and main.py in a single snapshot.
#
#
#
#git rebase
#
#Rebasing is the process of moving a branch to a new base commit. The general process can be visualized as the following:
#
#From a content perspective, rebasing really is just moving a branch from one commit to another. But internally, Git accomplishes this by creating new commits and applying them to the specified base—it’s literally rewriting your project history. It’s very important to understand that, even though the branch looks the same, it’s composed of entirely new commits.
#
#Usage
#git rebase <base>
#Rebase the current branch onto <base>, which can be any kind of commit reference (an ID, a branch name, a tag, or a relative reference to HEAD).
#
#Examples
#The example below combines git rebase with git merge to maintain a linear project history. This is a quick and easy way to ensure that your merges will be fast-forwarded.
## Start a new feature
#git checkout -b new-feature master
## Edit files
#git commit -a -m "Start developing a feature"
#In the middle of our feature, we realize there’s a security hole in our project
## Create a hotfix branch based off of master
#git checkout -b hotfix master
## Edit files
#git commit -a -m "Fix security hole"
## Merge back into master
#git checkout master
#git merge hotfix
#git branch -d hotfix
#After merging the hotfix into master, we have a forked project history. Instead of a plain git merge, we’ll integrate the feature branch with a rebase to maintain a linear history:
#
#git checkout new-feature
#git rebase master
#This moves new-feature to the tip of master, which lets us do a standard fast-forward merge from master:
#
#git checkout master
#git merge new-feature
#git rebase -i
#
#Running git rebase with the -i flag begins an interactive rebasing session. Instead of blindly moving all of the commits to the new base, interactive rebasing gives you the opportunity to alter individual commits in the process. This lets you clean up history by removing, splitting, and altering an existing series of commits. It’s like git commit --amend on steroids.
#
#Usage
#git rebase -i <base>
#Rebase the current branch onto <base>, but use an interactive rebasing session. This opens an editor where you can enter commands (described below) for each commit to be rebased. These commands determine how individual commits will be transferred to the new base. You can also reorder the commit listing to change the order of the commits themselves.
#
#Discussion
#Interactive rebasing gives you complete control over what your project history looks like. This affords a lot of freedom to developers, as it lets them commit a “messy” history while they’re focused on writing code, then go back and clean it up after the fact.
#
#Most developers like to use an interactive rebase to polish a feature branch before merging it into the main code base. This gives them the opportunity to squash insignificant commits, delete obsolete ones, and make sure everything else is in order before committing to the “official” project history. To everybody else, it will look like the entire feature was developed in a single series of well-planned commits.
#
#Examples
#The example found below is an interactive adaptation of the one from the non-interactive git rebase page.
#
## Start a new feature
#git checkout -b new-feature master
## Edit files
#git commit -a -m "Start developing a feature"
## Edit more files
#git commit -a -m "Fix something from the previous commit"
#
## Add a commit directly to master
#git checkout master
## Edit files
#git commit -a -m "Fix security hole"
#
## Begin an interactive rebasing session
#git checkout new-feature
#git rebase -i master
#The last command will open an editor populated with the two commits from new-feature, along with some instructions:
#
#pick 32618c4 Start developing a feature
#pick 62eed47 Fix something from the previous commit
#You can change the pick commands before each commit to determine how it gets moved during the rebase. In our case, let’s just combine the two commits with a squash command:
#
#pick 32618c4 Start developing a feature
#squash 62eed47 Fix something from the previous commit
#Save and close the editor to begin the rebase. This will open another editor asking for the commit message for the combined snapshot. After defining the commit message, the rebase is complete and you should be able to see the squashed commit in your git log output. This entire process can be visualized as follows:
#
#Git Tutorial: git rebase -i example
#Note that the squashed commit has a different ID than either of the original commits, which tells us that it is indeed a brand new commit.
#
#Finally, you can do a fast-forward merge to integrate the polished feature branch into the main code base:
#
#git checkout master
#git merge new-feature
#The real power of interactive rebasing can be seen in the history of the resulting master branch—the extra 62eed47 commit is nowhere to be found. To everybody else, it looks like you’re a brilliant developer who implemented the new-feature with the perfect amount of commits the first time around. This is how interactive rebasing can keep a project’s history clean and meaningful.
#
#git reflog
#
#Git keeps track of updates to the tip of branches using a mechanism called reflog. This allows you to go back to changesets even though they are not referenced by any branch or tag. After rewriting history, the reflog contains information about the old state of branches and allows you to go back to that state if necessary.
#
#Usage
#git reflog
#Show the reflog for the local repository.
#
#git reflog --relative-date
#Show the reflog with relative date information (e.g. 2 weeks ago).
#
#Discussion
#Every time the current HEAD gets updated (by switching branches, pulling in new changes, rewriting history or simply by adding new commits) a new entry will be added to the reflog.
#
#Example
#To understand git reflog, let's run through an example.
#
#0a2e358 HEAD@{0}: reset: moving to HEAD~2
#0254ea7 HEAD@{1}: checkout: moving from 2.2 to master
#c10f740 HEAD@{2}: checkout: moving from master to 2.2
#The reflog above shows a checkout from master to the 2.2 branch and back. From there, there's a hard reset to an older commit. The latest activity is represented at the top labeled HEAD@{0}.
#
#If it turns out that you accidentially moved back, the reflog will contain the commit master pointed to (0254ea7) before you accidentially dropped 2 commits.
#
#git reset --hard 0254ea7
#Using git reset it is then possible to change master back to the commit it was before. This provides a safety net in case history was accidentially changed.
#
#It's important to note that the reflog only provides a safety net if changes have been commited to your local repository and that it only tracks movements.
