#git config --global user.name mysterio86
#git add -p
#Dgit log -n <limit>
#git log --oneline
#git log --stat
#git log -p
#igit log --author="<pattern>"
#git log --grep="<pattern>"
#git log <since>..<until>
#git log filr
#git log --graph --decorate --oneline
#
#
#This ID can be used in commands like git log <since>..<until> to refer to specific commits. For instance, git log 3157e..5ab91 will display everything between the commits with ID's 3157e and 5ab91. Aside from checksums, branch names (discussed in the Branch Module) and the HEAD keyword are other common methods for referring to individual commits. HEAD always refers to the current commit, be it a branch or a specific commit.
#
#The ~ character is useful for making relative references to the parent of a commit. For example, 3157e~1 refers to the commit before 3157e, and HEAD~3 is the great-grandparent of the current commit.
#

#
#Example
#The Usage section provides many examples of git log, but keep in mind that several options can be combined into a single command:
#
#git log --author="John Smith" -p hello.py
#This will display a full diff of all the changes John Smith has made to the file hello.py.
#
#The .. syntax is a very useful tool for comparing branches. The next example displays a brief overview of all the commits that are in some-feature that are not in master.
#
#git log --oneline master..some-feature
#
#git checkout
#
#Usage
#git checkout master
#Return to the master branch. Branches are covered in depth in the next module, but for now, you can just think of this as a way to get back to the “current” state of the project.
#
#git checkout <commit> <file>
#Check out a previous version of a file. This turns the <file> that resides in the working directory into an exact copy of the one from <commit> and adds it to the staging area.
#
#git checkout <commit>
#Update all files in the working directory to match the specified commit. You can use either a commit hash or a tag as the <commit> argument. This will put you in a detached HEAD state.
#
#Example
#Viewing an Old Revision
#This example assumes that you’ve started developing a crazy experiment, but you’re not sure if you want to keep it or not. To help you decide, you want to take a look at the state of the project before you started your experiment. First, you’ll need to find the ID of the revision you want to see.
#
#git log --oneline
#Let’s say your project history looks something like the following:
#
#b7119f2 Continue doing crazy things
#872fa7e Try something crazy
#a1e8fb5 Make some important changes to hello.py
#435b61d Create hello.py
#9773e52 Initial import
#You can use git checkout to view the “Make some import changes to hello.py” commit as follows:
#
#git checkout a1e8fb5
#This makes your working directory match the exact state of the a1e8fb5 commit. You can look at files, compile the project, run tests, and even edit files without worrying about losing the current state of the project. Nothing you do in here will be saved in your repository. To continue developing, you need to get back to the “current” state of your project
#
#
#git checkout master
#This assumes that you're developing on the default master branch, which will be thoroughly discussed in the Branches Module.
#
#Once you’re back in the master branch, you can use either git revert or git reset to undo any undesired changes.
#
#
#Checking Out a File
#If you’re only interested in a single file, you can also use git checkout to fetch an old version of it. For example, if you only wanted to see the hello.py file from the old commit, you could use the following command:
#
#git checkout a1e8fb5 hello.py
#Remember, unlike checking out a commit, this does affect the current state of your project. The old file revision will show up as a “Change to be committed,” giving you the opportunity to revert back to the previous version of the file. If you decide you don’t want to keep the old version, you can check out the most recent version with the following:
#
#git checkout HEAD hello.py:
#
#
#
#
#
#
#
#
############################################################
#Undoing Changes
#This tutorial provides all of the necessary skills to work with previous revisions of a software project. First, it shows you how to explore old commits, then it explains the difference between reverting public commits in the project history vs. resetting unpublished changes on your local machine.
#
#git revert
#
#The git revert command undoes a committed snapshot. But, instead of removing the commit from the project history, it figures out how to undo the changes introduced by the commit and appends a new commit with the resulting content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.
#
#Usage
#git revert <commit>
#Generate a new commit that undoes all of the changes introduced in <commit>, then apply it to the current branch.
#
#Discussion
#Reverting should be used when you want to remove an entire commit from your project history. This can be useful, for example, if you’re tracking down a bug and find that it was introduced by a single commit. Instead of manually going in, fixing it, and committing a new snapshot, you can use git revert to automatically do all of this for you.
#
#Reverting vs. Resetting
#It's important to understand that git revert undoes a single commit—it does not “revert” back to the previous state of a project by removing all subsequent commits. In Git, this is actually called a reset, not a revert.
#Reverting has two important advantages over resetting. First, it doesn’t change the project history, which makes it a “safe” operation for commits that have already been published to a shared repository. For details about why altering shared history is dangerous, please see the git reset page.
#
#Second, git revert is able to target an individual commit at an arbitrary point in the history, whereas git reset can only work backwards from the current commit. For example, if you wanted to undo an old commit with git reset, you would have to remove all of the commits that occurred after the target commit, remove it, then re-commit all of the subsequent commits. Needless to say, this is not an elegant undo solution.
#
#git reset
#
#If git revert is a “safe” way to undo changes, you can think of git reset as the dangerous method. When you undo with git reset(and the commits are no longer referenced by any ref or the reflog), there is no way to retrieve the original copy—it is a permanent undo. Care must be taken when using this tool, as it’s one of the only Git commands that has the potential to lose your work.
#Like git checkout, git reset is a versatile command with many configurations. It can be used to remove committed snapshots, although it’s more often used to undo changes in the staging area and the working directory. In either case, it should only be used to undo local changes—you should never reset snapshots that have been shared with other developers.
#
#
